generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LastStatus {
  OK
  TIMEOUT_ERROR
  DNS_ERROR
  SERVER_ERROR
  ERROR
}

model SocialMediaUrls {
  id        Int      @id @default(autoincrement())
  key       String
  value     String
  userId    Int
  users     User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            Int               @id @default(autoincrement())
  name          String
  email         String            @unique
  password      String
  profileUrl    String
  bio           String?
  socialLinks   SocialMediaUrls[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  folders       Folders[]         @relation("UserFolders")
  profile       Profiles[]
  folderFollows Folders[]         @relation("UserFollowFolders")
}

model Folders {
  id                 Int      @id @default(autoincrement())
  folderName         String   @unique
  folderCoverImage   String?
  folderProfileImage String?
  folderDescription  String?
  folderTags         String[] @default([])
  isPublishable      Boolean  @default(false)
  folderShareUrl     String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  userId             Int
  user               User     @relation(fields: [userId], references: [id], name: "UserFolders")
  Links              Links[]
  followers          User[]   @relation("UserFollowFolders")
}

model Links {
  id              String     @id @default(uuid())
  url             String
  title           String
  imageUrl        String?
  domain          String
  summary         String?
  pingInterval    Int        @default(3000)
  isOnline        Boolean    @default(false)
  lastCheckedAt   String?
  lastStatus      LastStatus
  lastStatusCode  Int
  tags            String[]   @default([])
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  folder          Folders    @relation(fields: [folderId], references: [id])
  folderId        Int
  isSpam          Boolean    @default(false)
  isMalicious     Boolean    @default(false)
  threatLevel     Int?
  riskDescription String?
  isAdult         Boolean    @default(false)
  profileId       Profiles[]
}

model Profiles {
  id                Int      @id @default(autoincrement())
  userId            Int
  user              User     @relation(fields: [userId], references: [id])
  isPublished       Boolean  @default(true)
  description       String?
  title             String
  viewCount         Int      @default(0)
  links             Links[]
  isEditable        Boolean  @default(false)
  tags              String[]
  canCopiedByOthers Boolean  @default(false)
  copyCount         Int      @default(0)
  hits              Int      @default(0)
  unHits            Int      @default(0)
}
